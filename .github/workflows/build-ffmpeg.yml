name: Build FFmpeg with libx264 for Broad Compatibility

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest # Keep the default GitHub Actions runner (modern GLIBC)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # This action will now run successfully on ubuntu-latest

    - name: Build FFmpeg inside CentOS 7 Docker container
      run: |
        # Define paths inside the container
        CONTAINER_BUILD_DIR=/ffmpeg_build
        CONTAINER_LIBS_DIR=/ffmpeg_build/ffmpeg_libs
        CONTAINER_BIN_INSTALLED_DIR=/ffmpeg_build/bin_installed
        CONTAINER_PKG_CONFIG_PATH=/ffmpeg_build/ffmpeg_libs/lib/pkgconfig

        # Create a build script to run inside the Docker container
        cat << 'EOF' > build_script.sh
        #!/bin/bash
        set -euo pipefail # Exit on error, unset variables, pipefail

        echo "Running inside Docker container..."

        # Install build dependencies (for CentOS/RHEL/manylinux)
        yum update -y && yum install -y \
          gcc gcc-c++ make autoconf automake libtool pkgconfig \
          nasm yasm git tar gzip

        # Create build directories
        mkdir -p "${CONTAINER_BUILD_DIR}"
        cd "${CONTAINER_BUILD_DIR}"

        # Build libx264
        echo "Building libx264..."
        git clone https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --prefix="${CONTAINER_LIBS_DIR}" --enable-static --disable-opencl
        make -j$(nproc)
        make install
        cd "${CONTAINER_BUILD_DIR}" # Go back

        # Build FFmpeg
        echo "Building FFmpeg..."
        git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
        cd ffmpeg

        # Set PKG_CONFIG_PATH for the configure step within the container
        export PKG_CONFIG_PATH="${CONTAINER_PKG_CONFIG_PATH}"

        ./configure \
          --prefix="${CONTAINER_BIN_INSTALLED_DIR}" \
          --pkg-config-flags="--static" \
          --extra-cflags="-I${CONTAINER_LIBS_DIR}/include" \
          --extra-ldflags="-L${CONTAINER_LIBS_DIR}/lib" \
          --bindir="/usr/local/bin" \
          --enable-gpl \
          --enable-libx264 \
          --enable-nonfree \
          --disable-shared \
          --enable-static \
          --disable-doc \
          --disable-debug \
          # --disable-ffplay \
          # REMOVE THIS LINE: --disable-ffprobe
        make -j$(nproc)
        make install

        echo "Verifying FFmpeg installation inside container..."
        /usr/local/bin/ffmpeg -version

        # Optional: Copy built binaries out of the container to a mounted volume
        # (This is handled by the docker run command itself, mapping host path to container path)

        EOF

        # Run the build script inside a CentOS 7 Docker container
        docker run --rm \
          -v "$(pwd):/github/workspace" \
          -v "$(pwd)/local_build_artifacts:${CONTAINER_BIN_INSTALLED_DIR}" \
          centos:7 \
          bash -c "cd /github/workspace && chmod +x build_script.sh && ./build_script.sh"

        # Create a directory for artifacts on the host (GitHub Actions runner)
        mkdir -p ${{ github.workspace }}/ffmpeg_build_output
        # Copy the built binaries from the temporary host directory to the artifact directory
        cp local_build_artifacts/ffmpeg local_build_artifacts/ffprobe ${{ github.workspace }}/ffmpeg_build_output/

        # Now tar and upload from the host's perspective
        cd ${{ github.workspace }}/ffmpeg_build_output
        tar -czvf ffmpeg-binaries-linux-amd64.tar.gz ffmpeg ffprobe # Ensure ffprobe is built

    - name: Upload FFmpeg binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-linux-amd64
        path: ${{ github.workspace }}/ffmpeg_build_output/ffmpeg-binaries-linux-amd64.tar.gz
        retention-days: 7
